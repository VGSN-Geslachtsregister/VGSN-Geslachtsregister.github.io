import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Iterator;

/**
 *
 * @author Eva Grasmeijer
 * @version 3.1 -- 29-07-2017
 */
public class MyDodo extends Dodo
{
    /* ATTRIBUTE DECLARATIONS: */
    private int myNrOfStepsTaken;
    
    public int totalScore = 0;
    public int stepsAllowedToTake = Mauritius.MAXSTEPS;

    public MyDodo() {
        super( EAST );
        /* INITIALISATION OF ATTRIBUTES: */
        myNrOfStepsTaken = 0;
    }

    /* METHODS OF THE CLASS: */

    public void act() {
    }

    /**
     * dodo tries to get highest score. dodo searches for egg with highest score. the score depends ons distance dodo to egg and distance egg to other eggs and value of egg.
     * when dodo finds egg with highest score, the dodo walks to egg with highest score. this repeats until dodo reached the maxumum of steps allowed to take. there is an scoreboard which shows how many steps you've left and it shows your score.
     *
     *
     * <P> Initial: Dodo is somewhere in the world
     * <P> Final: dodo is somewhere in the world and tried to get the highest score. 
     *
     */

    public void tryToGetHighestScore(){

        List<Egg> listOfEggsInWorld = getListOfEggsInWorld();
        List<Egg> listOfRemainingEggsInWorld = getListOfEggsInWorld();
        World world = getWorld();
        Egg[][] eggArray = new Egg[world.getWidth()][world.getHeight()];
        int stepsTaken = 0;
        if(! listOfEggsInWorld.isEmpty() ){

        for(Egg egg : listOfEggsInWorld){

            eggArray[egg.getX()][egg.getY()] = egg;

        }
        

            int bestEggScore = 100000;
            while(! listOfEggsInWorld.isEmpty() && stepsTaken < stepsAllowedToTake){
                System.out.println(" stepsTaken:" + stepsTaken);
                Egg bestEgg = listOfEggsInWorld.get(0);


                for(Egg egg: listOfEggsInWorld){
                    int scoreCurrentEggWithoutValue = determineDistanceDodoToEgg(egg.getX(), egg.getY()) + determineDistanceEggToEggs(eggArray, egg.getX(), egg.getY() );
                    System.out.println("scoreCurrentEggWithoutValue:" + scoreCurrentEggWithoutValue);
                    int scoreCurrentEggWithValue = (scoreCurrentEggWithoutValue / listOfEggsInWorld.size()) * egg.getValue();
                    System.out.println("scoreCurrentEggWithValue:" + scoreCurrentEggWithValue);
                    int scoreCurrentEgg = scoreCurrentEggWithoutValue - scoreCurrentEggWithValue;
                    System.out.println("scoreCurrentEgg:" + scoreCurrentEgg );
                    if(scoreCurrentEgg < bestEggScore){
                        bestEggScore = scoreCurrentEgg;
                        bestEgg =  egg;
                        System.out.println("bestScore: " + bestEggScore );
                    }
                }
    
                if ((stepsTaken + determineDistanceDodoToEgg(bestEgg.getX(), bestEgg.getY())) <= stepsAllowedToTake){
                    walkToEgg(bestEgg.getX(), bestEgg.getY());
                    pickUpEgg();
                    totalScore += bestEgg.getValue();
                    updateScores(stepsAllowedToTake, totalScore);
    
                    listOfEggsInWorld.remove(bestEgg);
                }
                
                listOfEggsInWorld = getListOfEggsInWorld();
            }
        }
        else{
            showError("Helaas, er liggen geen eieren in de wereld.");
        }
    }

    /**
     * dodo walks to egg.
     *
     * <P> Initial: Dodo is somewhere in the world
     * <P> Final: dodo walked to egg on (coordx, coordy).
     *
     */
    public int walkToEgg( int coordx, int coordy) {
        int startx = getX();
        int starty = getY();
        int endx = coordx;
        int endy = coordy;
        int stepsTaken = 0;

        while (endx > startx){
            setDirection(EAST);
            startx++;
            move();


            stepsTaken++;

        }
        while (endx < startx){
            setDirection(WEST);
            startx--;
            move();

            stepsTaken++;

        }
        while (endy > starty){
            setDirection(SOUTH);
            starty++;
            move();

            stepsTaken++;

        }
        while (endy < starty){
            setDirection(NORTH);
            starty--;
            move();

            stepsTaken++;

        }
        return stepsTaken;
    }

    /**
     * dodo determines distance of egg to other eggs. dodo takes in consideration if ther are eggs next to each other. 
     *
     * <P> Initial: Dodo is somewhere in the world
     * <P> Final: dodo is at same place as starded
*
     * return @ distance egg to other eggs
     */

    public int determineDistanceEggToEggs(Egg[][] eggArray, int currentX, int currentY) {
        int distance = 0;
        int startEggCoordinateX = currentX;
        int startEggCoordinateY = currentY;

        int x = currentX;
        int y = currentY;
        int w = eggArray.length - 1; // Width
        int h = eggArray[0].length - 1; // Height

        Egg[][] neighbours = new Egg[3][3];

        for (int i = -1; i <= 1; i++) {
            if ((x == 0 && i == -1) || (x == w && i == 1)) continue;
            for (int j = -1; j <= 1; j++) {
                if ((y == 0 && j == -1) || (y == w && j == 1)) continue;
                if (eggArray[x+i][y+j] != null && !(i == 0 && j == 0)) {
                    neighbours[1+i][1+j] = eggArray[x+i][y+j];
                }
            }
        }

        for (int i = 0; i < neighbours.length; i++) {
            for (int j = 0; j < neighbours[i].length; j++) {
                System.out.print(neighbours[j][i] + " ");
            }
            System.out.println();
        }
        
        List<Egg> listOfEggs = getListOfEggsInWorld();
        
        List<Egg> steps = new ArrayList<Egg>();

        while (! listOfEggs.isEmpty()) {

            if (neighbours[1+1][1] != null && !(neighbours[1+1][1+1]==null || neighbours[1+1][1-1]==null )){


                distance++;

                Egg currentEgg = eggArray[currentX+1][currentY];
                steps.add(currentEgg);
                listOfEggs.remove(currentEgg);

                eggArray[currentX+1][currentY] = null;
                currentX++;

            }
            else if (neighbours[1-1][1] != null && !(neighbours[1+1][1+1]==null || neighbours[1+1][1-1]==null )){
                distance++;
                Egg currentEgg = eggArray[currentX-1][currentY];
                steps.add(currentEgg);
                listOfEggs.remove(currentEgg);

                eggArray[currentX-1][currentY] = null;
                currentX--;
            }
            else if (neighbours[1][1-1] != null && !(neighbours[1-1][1-1]==null || neighbours[1+1][1-1]==null )){
                distance++;
                Egg currentEgg = eggArray[currentX][currentY-1];
                steps.add(currentEgg);
                listOfEggs.remove(currentEgg);

                eggArray[currentX][currentY-1] = null;
                currentY--;
            }
            else if (neighbours[1][1+1] != null && !(neighbours[1-1][1+1]==null || neighbours[1+1][1+1]==null )){
                distance++;
                Egg currentEgg = eggArray[currentX][currentY+1];
                steps.add(currentEgg);
                listOfEggs.remove(currentEgg);
                eggArray[currentX][currentY+1] = null;
                currentY++;
            }
            else{
                while(! listOfEggs.isEmpty()){
                    Egg currentEgg = listOfEggs.get(0);
                    distance =+ determineDistanceEggToEgg(currentX, currentY, currentEgg.getX(), currentEgg.getY());
                    currentX = currentEgg.getX();
                         currentY = currentEgg.getY();
                         steps.add(currentEgg);
                         listOfEggs.remove(currentEgg);
                         eggArray[currentX][currentY] = null;
            }
        }

    }
    return distance;
}

    
  
    /**
     * dodo goest to face east.
     *
     * <P> Initial: 2dodo is n world.
     * <P> Final: dodo fases east.
     */
    public void faceEast() {
        int getDirection;
        while(getDirection() != EAST){
            turnLeft();
        }

    }

    

    /**
     * Dodo determines how many steps she has to take to get at location (xcoor,Ycoor).
     *
     * <P> Initial: Dodo is somewhere in the world
     * <P> Final: Dodo is at same place as start position.
     *
     * @ return number of steps to get at location (xcoor,ycoor)
     *
     */
    public int determineDistance(int xcoor, int ycoor){
        int startx = getX();
        int starty = getY();
        int endx = xcoor;
        int endy = ycoor;
        int steps = 0;

        while (endx > startx){
            startx++;
            steps++;

        }

        while (endy > starty){
            starty++;
            steps++;

        }
        while (endx < startx){
            startx--;
            steps++;

        }

        while (endy < starty){
            starty--;
            steps++;

        }

        return(steps);
    }

    /**
     * Dodo determines how many steps she has to take to get to egg. 
     *
     * <P> Initial: Dodo is somewhere in the world
     * <P> Final: Dodo is at same place as start position.
     *
     * @ return number of steps to get at egg. 
     *
     */
    public int determineDistanceDodoToEgg(int xCoorEgg, int yCoorEgg){
        int startx = getX();
        int starty = getY();
        int endx = xCoorEgg;
        int endy = yCoorEgg;
        int steps = 0;

        while (endx > startx){
            startx++;
            steps++;

        }

        while (endy > starty){
            starty++;
            steps++;

        }
        while (endx < startx){
            startx--;
            steps++;

        }

        while (endy < starty){
            starty--;
            steps++;

        }

        return(steps);
    }

    /**
     * Dodo determens how many steps she has to take to get from an egg to an egg. 
     *
     * <P> Initial: Dodo is somewhere in the world.
     * <P> Final: Dodo is at same place as start position.
     *
     * @ return number of steps to get from egg to other egg. 
     *
     */
    public int determineDistanceEggToEgg(int xCoordStartEgg, int yCoordStartEgg, int xCoordEndEgg, int yCoordEndEgg){
        int startx = xCoordStartEgg;
        int starty = yCoordStartEgg;
        int endx = xCoordEndEgg;
        int endy = yCoordEndEgg;
        int steps = 0;

        while (endx > startx){
            startx++;
            steps++;

        }

        while (endy > starty){
            starty++;
            steps++;

        }
        while (endx < startx){
            startx--;
            steps++;

        }

        while (endy < starty){
            starty--;
            steps++;

        }

        return(steps);
    }

    

    

    /**
     * If on egg, pick up egg, then if possible Move one cell forward in the current direction.
     * also updates scores. 
     *
     * <P> Initial: Dodo is somewhere in the world
     * <P> Final: If possible, Dodo has moved forward one cell
     *
     */
    public void move() {
        if(onEgg()){
            Egg egg = getEgg();
            totalScore += egg.getValue();
            updateScores(stepsAllowedToTake, totalScore);
            pickUpEgg();
        }
                
        if ( canMove() ) {
            step();
            stepsAllowedToTake--;
        } else {
            showError( "I'm stuck!" );
        }
    }

    /**
     * Test if Dodo can move forward,
     * i.e. there are no obstructions or end of world in the cell in front of her.
     *
     * <p> Initial:   Dodo is somewhere in the world
     * <p> Final:     Same as initial situation
     *
     * @return  boolean true if Dodo can move (thus, no obstructions ahead)
     *                  false if Dodo can't move
     *                      there is an obstruction or end of world ahead
     */
    public boolean canMove() {
        if ( borderAhead() || fenceAhead() ){
            return false;
        } else {
            return true;
        }
    }

    /**
     * Places all the Egg objects in the world in a list.
     *
     * @return List of Egg objects in the world
     */
    public List<Egg> getListOfEggsInWorld() {
        return getWorld().getObjects(Egg.class);
    }
}